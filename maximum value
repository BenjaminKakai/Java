public class Solution {
    public int solution(int[] A, int[] B) {
        // Check for valid input
        if (A == null || B == null || A.length == 0 || B.length == 0 || A.length != B.length) {
            throw new IllegalArgumentException("Invalid input");
        }

        // We start at the first column
        int maxAtTop = A[0]; // If we stay on the top row
        int maxAtBottom = B[0]; // If we move to the bottom row

        // Traverse each column and calculate the maximum sum
        for (int i = 1; i < A.length; i++) {
            // If staying on the top row, choose the max from the current top or from the bottom + move to top
            int newMaxAtTop = Math.max(maxAtTop, maxAtBottom + A[i - 1]) + A[i];
            // If moving to the bottom row, choose the max from the current bottom or from the top + move to bottom
            int newMaxAtBottom = Math.max(maxAtBottom, maxAtTop + B[i - 1]) + B[i];

            // Update the max sums at the current column
            maxAtTop = newMaxAtTop;
            maxAtBottom = newMaxAtBottom;
        }

        // The maximum sum path ends at the last column, at either the top or the bottom row
        return Math.max(maxAtTop, maxAtBottom);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example test cases
        int[] A1 = {3, 4, 6};
        int[] B1 = {6, 5, 4};
        System.out.println(solution.solution(A1, B1)); // Expected output: 5

        int[] A2 = {1, 2, 1, 1, 1, 4};
        int[] B2 = {1, 1, 1, 3, 1, 1};
        System.out.println(solution.solution(A2, B2)); // Expected output: 2

        int[] A3 = {-5, -1, -3};
        int[] B3 = {-5, 5, -2};
        System.out.println(solution.solution(A3, B3)); // Expected output: -1
    }
}
